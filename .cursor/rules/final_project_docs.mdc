---
description: 
globs: 
alwaysApply: true
---
# 钓鱼邮件识别教学游戏 - 最终项目文档

## 1. 项目概述

本项目是一款模仿邮箱的网页小游戏，旨在帮助玩家学会如何识别钓鱼邮件，提升网络安全意识。玩家需要在游戏中判断邮件是否为钓鱼邮件，并将钓鱼邮件拖拽到垃圾桶中。

此版本引入了用户系统，允许玩家注册和登录，并永久保存他们的游戏进度和成绩。

## 2. 技术栈

- **前端**: Vue 3 使用 Vue CLI
- **后端**: Python 使用 FastAPI 框架
- **数据库**: PostgreSQL
- **UI 框架**: Element Plus 

## 3. 数据库设计

### 3.1 表结构

#### 3.1.1 用户表 (users)

| 字段名 | 类型 | 描述 |
|--------|------|------|
| id | SERIAL | 主键，自增 |
| username | VARCHAR(50) | 用户名，唯一 |
| email | VARCHAR(100) | 电子邮箱，唯一 |
| hashed_password | VARCHAR(255) | 加密后的密码 |
| created_at | TIMESTAMP | 账户创建时间 |
| is_admin | BOOLEAN | 是否为管理员，默认为 FALSE |

#### 3.1.2 关卡表 (levels)

| 字段名 | 类型 | 描述 |
|--------|------|------|
| id | SERIAL | 主键，自增 |
| name | VARCHAR(100) | 关卡名称 |
| description | TEXT | 关卡描述 |
| "order" | INTEGER | 关卡顺序 |

注意：order 是 SQL 的关键字，所以用双引号括起来。

#### 3.1.3 邮件表 (emails)

| 字段名 | 类型 | 描述 |
|--------|------|------|
| id | SERIAL | 主键，自增 |
| level_id | INTEGER | 外键，关联 levels(id) |
| sender | VARCHAR(100) | 发件人 |
| subject | VARCHAR(255) | 邮件主题 |
| content | TEXT | 邮件正文 |
| is_phishing | BOOLEAN | 是否为钓鱼邮件 |
| phishing_clue | TEXT | 钓鱼邮件的骗术揭秘（如果是钓鱼邮件） |

#### 3.1.4 玩家记录表 (player_records)

| 字段名 | 类型 | 描述 |
|--------|------|------|
| id | SERIAL | 主键，自增 |
| user_id | INTEGER | 外键，关联 users(id) |
| level_id | INTEGER | 外键，关联 levels(id) |
| correct_count | INTEGER | 正确判断的邮件数量 |
| total_count | INTEGER | 总邮件数量 |
| completed_at | TIMESTAMP | 关卡完成时间 |
| judgments | JSONB | 玩家判断结果，例如 [{"email_id": 1, "user_judgment": "phishing", "correct": true}] |

## 4. API 设计

API 将遵循 RESTful 原则，并通过 JWT (JSON Web Token) 进行保护。

### 4.1 认证 API (/api/auth)

1. **用户注册**
   - 路径: `/api/auth/register`
   - 方法: POST
   - 描述: 创建一个新用户账户。
   - 请求体:
     ```json
     {
       "username": "new_player",
       "email": "player@example.com",
       "password": "secure_password_123"
     }
     ```
   - 成功响应 (201):
     ```json
     {
       "id": 1,
       "username": "new_player",
       "email": "player@example.com"
     }
     ```

2. **用户登录**
   - 路径: `/api/auth/login`
   - 方法: POST
   - 描述: 用户登录以获取 JWT。
   - 请求体:
     ```json
     {
       "username": "new_player",
       "password": "secure_password_123"
     }
     ```
   - 成功响应 (200):
     ```json
     {
       "access_token": "your_jwt_token_here",
       "token_type": "bearer"
     }
     ```

3. **获取当前用户信息**
   - 路径: `/api/auth/me`
   - 方法: GET
   - 描述: 获取当前已登录用户的信息（需要有效的 JWT）。
   - 成功响应 (200):
     ```json
     {
       "id": 1,
       "username": "new_player",
       "email": "player@example.com",
       "is_admin": false
     }
     ```

### 4.2 游戏 API (/api/game)

所有此模块下的 API 都需要有效的 JWT 进行认证。

1. **获取所有关卡列表**
   - 路径: `/api/game/levels`
   - 方法: GET
   - 描述: 获取所有关卡的列表，用于在游戏主界面展示。
   - 成功响应 (200):
     ```json
     [
       { "id": 1, "name": "初级挑战", "description": "...", "order": 1 },
       { "id": 2, "name": "中级挑战", "description": "...", "order": 2 }
     ]
     ```

2. **获取特定关卡的邮件**
   - 路径: `/api/game/levels/{level_id}/emails`
   - 方法: GET
   - 描述: 获取指定关卡的所有邮件（不包含答案）。
   - 成功响应 (200):
     ```json
     [
       { "id": 1, "sender": "...", "subject": "...", "content": "..." },
       { "id": 2, "sender": "...", "subject": "...", "content": "..." }
     ]
     ```

3. **提交关卡结果**
   - 路径: `/api/game/levels/{level_id}/submit`
   - 方法: POST
   - 描述: 提交玩家在当前关卡的判断结果。服务器将计算分数并保存记录。
   - 请求体:
     ```json
     {
       "judgments": [
         { "email_id": 1, "is_phishing_guess": true },
         { "email_id": 2, "is_phishing_guess": false }
       ]
     }
     ```
   - 成功响应 (200):
     ```json
     {
       "correct_count": 8,
       "total_count": 10,
       "results": [
         {
           "email_id": 1,
           "is_phishing": true,
           "correct": true,
           "phishing_clue": "发件人地址可疑..."
         }
       ],
       "next_level_id": 2
     }
     ```

4. **获取游戏总结**
   - 路径: `/api/game/summary`
   - 方法: GET
   - 描述: 获取当前登录玩家的所有游戏记录和总结。
   - 成功响应 (200):
     ```json
     {
       "total_correct": 25,
       "total_played": 30,
       "level_records": [
         { "level_id": 1, "level_name": "初级挑战", "correct_count": 8, "total_count": 10 },
         { "level_id": 2, "level_name": "中级挑战", "correct_count": 9, "total_count": 10 }
       ]
     }
     ```

### 4.3 管理后台 API (/api/admin)

所有此模块下的 API 都需要管理员权限（is_admin: true）。

1. **关卡管理**
   - GET `/api/admin/levels`: 获取所有关卡。
   - POST `/api/admin/levels`: 创建新关卡。
   - PUT `/api/admin/levels/{level_id}`: 更新关卡信息。
   - DELETE `/api/admin/levels/{level_id}`: 删除关卡。

2. **邮件管理**
   - GET `/api/admin/levels/{level_id}/emails`: 获取某关卡下所有邮件（包含答案）。
   - POST `/api/admin/emails`: 创建新邮件。
   - PUT `/api/admin/emails/{email_id}`: 更新邮件信息。
   - DELETE `/api/admin/emails/{email_id}`: 删除邮件。

3. **数据统计**
   - GET `/api/admin/statistics/overview`: 获取整体游戏数据统计。
   - GET `/api/admin/statistics/emails`: 获取邮件错误率统计（哪些邮件最容易被错误判断）。

## 5. 前端实现细则

### 5.1 页面与路由

使用 vue-router 进行页面导航。

- `/`: 开始页面 (Start.vue) - 游戏介绍和开始按钮。
- `/login`: 登录页面 (Login.vue)。
- `/register`: 注册页面 (Register.vue)。
- `/game`: 游戏主界面 (GameLayout.vue) - 这是一个包含导航和路由出口的布局。
  - `/game/levels`: 关卡选择页 (LevelSelect.vue)。
  - `/game/play/:levelId`: 游戏进行页 (GamePlay.vue) - 模仿邮箱界面，进行游戏。
- `/summary`: 总结页面 (Summary.vue) - 展示玩家所有成绩。
- `/admin`: 管理后台 (AdminLayout.vue) - 管理员专用。

### 5.2 状态管理

使用 Pinia 作为状态管理库，它与 Vue 3 完美集成。

- **authStore**: 管理用户认证状态，包括 JWT、用户信息、是否登录等。
- **gameStore**: 管理游戏状态，如当前关卡、邮件列表、玩家的判断等。

### 5.3 核心组件

1. **EmailItem.vue**
   - 功能：邮件列表中的一项，可拖拽
   - 属性：
     - email: 邮件对象
     - isRead: 是否已读
   - 事件：
     - click: 点击邮件
     - dragstart: 开始拖拽邮件

2. **EmailContent.vue**
   - 功能：显示完整的邮件内容
   - 属性：
     - email: 邮件对象
   - 显示内容：
     - 发件人
     - 主题
     - 正文（支持HTML格式）

3. **TrashBin.vue**
   - 功能：垃圾桶区域，用于接收拖拽的邮件
   - 事件：
     - dragover: 拖拽经过时的视觉反馈
     - drop: 接收拖拽的邮件
   - 交互：
     - 拖拽邮件到此区域时高亮显示
     - 成功放入垃圾桶时的动画效果

4. **LevelResultModal.vue**
   - 功能：关卡结算弹窗，显示得分和骗术揭秘
   - 属性：
     - result: 结算结果对象
     - isLastLevel: 是否为最后一关
   - 事件：
     - nextLevel: 进入下一关
     - viewSummary: 查看总结

### 5.4 认证流程

1. **路由守卫**: 使用 vue-router 的导航守卫 (beforeEach)。
2. **检查Token**: 在每次路由切换前，检查 Pinia authStore 中是否存在有效的 JWT。
3. **访问控制**:
   - 如果用户未登录，访问受保护的页面（如 /game）时，自动重定向到 /login。
   - 如果用户已登录，访问 /login 或 /register 时，可以重定向到 /game。
4. **API 请求**: 使用 Axios 或 Fetch API。创建一个 API 实例，在请求拦截器中自动添加 Authorization: Bearer <token> 头。

### 5.5 游戏界面布局

1. **开始页面**
   ```
   ┌───────────────────────────────┐
   │                               │
   │  游戏标题                     │
   │  一些介绍背景的文字           │
   │                               │
   ├───────────────────────────────┤
   │                               │
   │  背景图片                     │
   │                               │
   │                               │
   │  [开始挑战]                   │
   │                               │
   └───────────────────────────────┘
   ```

. **开始页面 (Start.vue)**
   - 游戏标题
   - 背景介绍文字（简洁的游戏说明）
   - 背景图片
   - "开始挑战"按钮（醒目位置）
   - 页面布局：
     ```
     ┌───────────────────────────────┐
     │                               │
     │  一些介绍背景的文字           │
     │                               │
     ├───────────────────────────────┤
     │                               │
     │  一些超设计感图片             │
     │                               │
     │                               │
     │                               │
     │                               │
     └───────────────────────────────┘
     ```
2. **游戏主界面**
   ```模拟outlook邮箱，只有收件箱和垃圾箱有功能，其余是假的实现
   ┌───────────────────────────────┬───────────────────────────────┐
   │                               │                               │
   │  [收件箱]                     │  发件人: xxx@example.com      │
   │  [垃圾桶]                     │  主题: 邮件主题               │
   │                               │                               │
   │  邮件列表:                    │  邮件正文内容...              │
   │  - 发件人 | 主题              │                               │
   │  - 发件人 | 主题              │                               │
   │  - 发件人 | 主题              │                               │
   │                               │                               │
   │                               │                               │
   │                               │                               │
   │                               │  [完成本关]                   │
   └───────────────────────────────┴───────────────────────────────┘
   ```

3. **关卡结算弹窗**
   ```
   ┌───────────────────────────────┐
   │  挑战完成！                   │
   │  您成功识别了 X 封钓鱼邮件中的 │
   │  Y 封。                       │
   │                               │
   │  骗术揭秘:                    │
   │  - 邮件1: 发件人地址可疑...    │
   │  - 邮件2: 链接指向错误网站...  │
   │                               │
   │  [下一关] / [查看总结]        │
   └───────────────────────────────┘
   ```

## 6. 后端实现细则

### 6.1 项目结构

```
backend/
├── app/
│   ├── main.py          # 应用入口
│   ├── config.py        # 配置 (数据库URL, JWT密钥等)
│   ├── database.py      # 数据库会话管理
│   ├── models.py        # SQLAlchemy 数据模型
│   ├── schemas.py       # Pydantic 数据校验模型
│   ├── crud.py          # 数据库增删改查操作
│   ├── routers/
│   │   ├── auth.py      # 认证路由
│   │   ├── game.py      # 游戏路由
│   │   └── admin.py     # 管理员路由
│   └── dependencies.py  # 依赖项 (如获取当前用户)
├── requirements.txt
```

### 6.2 认证实现

- **密码哈希**: 使用 passlib 库来安全地哈希和验证密码。
- **JWT**: 使用 python-jose 库来创建、签名和解码 JWT。
- **依赖注入**: 创建一个 get_current_user 的依赖项，注入到需要认证的路由中。

```python
# In dependencies.py
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from . import models, schemas, database

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/api/auth/login")

def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(database.get_db)):
    # ... JWT 解码和验证逻辑 ...
    # 从数据库中查找用户并返回
    return user
```

### 6.3 数据模型实现

使用 SQLAlchemy ORM：

```python
# models.py
from sqlalchemy import Boolean, Column, ForeignKey, Integer, String, Text, TIMESTAMP
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.postgresql import JSONB
from datetime import datetime

from .database import Base

class User(Base):
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String(50), unique=True, index=True)
    email = Column(String(100), unique=True, index=True)
    hashed_password = Column(String(255))
    created_at = Column(TIMESTAMP, default=datetime.utcnow)
    is_admin = Column(Boolean, default=False)
    
    records = relationship("PlayerRecord", back_populates="user")

class Level(Base):
    __tablename__ = "levels"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100))
    description = Column(Text)
    order = Column(Integer)
    
    emails = relationship("Email", back_populates="level")
    records = relationship("PlayerRecord", back_populates="level")

class Email(Base):
    __tablename__ = "emails"
    
    id = Column(Integer, primary_key=True, index=True)
    level_id = Column(Integer, ForeignKey("levels.id"))
    sender = Column(String(100))
    subject = Column(String(255))
    content = Column(Text)
    is_phishing = Column(Boolean)
    phishing_clue = Column(Text)
    
    level = relationship("Level", back_populates="emails")

class PlayerRecord(Base):
    __tablename__ = "player_records"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    level_id = Column(Integer, ForeignKey("levels.id"))
    correct_count = Column(Integer)
    total_count = Column(Integer)
    completed_at = Column(TIMESTAMP, default=datetime.utcnow)
    judgments = Column(JSONB)
    
    user = relationship("User", back_populates="records")
    level = relationship("Level", back_populates="records")
```

## 7. 游戏内容设计

### 7.1 关卡设计

1. **第一关：初级挑战**
   - 描述：简单的钓鱼邮件识别
   - 邮件数量：10封（3封正常，7封钓鱼）
   - 特点：明显的钓鱼特征，如拼写错误、可疑链接等

2. **第二关：中级挑战**
   - 描述：更复杂的钓鱼邮件识别
   - 邮件数量：10封（4封正常，6封钓鱼）
   - 特点：更隐蔽的钓鱼特征，需要仔细阅读

3. **第三关：高级挑战**
   - 描述：高级钓鱼邮件识别
   - 邮件数量：10封（7封正常，3封钓鱼）
   - 特点：非常隐蔽的钓鱼特征，模仿真实邮件

4. **第四关：专家挑战**
   - 描述：最具隐蔽性的钓鱼邮件识别
   - 邮件数量：10封（9封正常，1封钓鱼）
   - 特点：极其隐蔽的钓鱼特征，几乎与正常邮件无异

### 7.2 邮件示例

**正常邮件示例：**

```
发件人: newsletter@company.com
主题: 本周新闻简报
内容: 尊敬的用户，

感谢您订阅我们的周报。以下是本周的热门新闻：

1. 公司推出新产品
2. 行业动态分析
3. 用户反馈调查

如果您有任何问题，请回复此邮件。

祝好，
公司团队
```

**钓鱼邮件示例：**

```
发件人: security@g00gle.com
主题: 您的账户已被锁定
内容: 尊敬的用户，

我们检测到您的账户存在异常活动，为了保护您的账户安全，我们已暂时锁定您的账户。

请点击以下链接重新验证您的身份信息：
[重新验证](mdc:http:/fake-google.com/verify)

如不立即处理，您的账户将在24小时内被永久锁定。

谷歌安全团队
```

**骗术揭秘：**
- 发件人域名拼写错误：g00gle.com（正确应为google.com）
- 链接指向可疑网站：fake-google.com而非google.com
- 制造紧急感：声称账户将在24小时内被永久锁定

## 8. 部署方案

### 8.1 数据库

- 使用云服务商（如 AWS RDS, Google Cloud SQL）或自建的 PostgreSQL 服务器。
- 确保数据库备份和恢复策略。

### 8.2 后端

- 使用 Gunicorn + Uvicorn 将 FastAPI 应用部署为生产级服务。
- 使用 Nginx 作为反向代理。
- 配置适当的安全头部和CORS策略。

### 8.3 前端

- 使用 npm run build 构建 Vue 3 应用为静态文件。
- 由 Nginx 直接提供静态文件服务。

**部署简化**
   - 前后端可以部署在同一服务器上，减少跨域问题
   - 使用简单的Web服务器如Nginx直接部署
   - 避免容器化等复杂部署方式

## 9. 总结

本项目是一款教育性质的网页游戏，旨在提高用户对钓鱼邮件的识别能力。通过模拟真实邮箱环境，让用户在实践中学习如何辨别钓鱼邮件的特征。项目采用现代化的技术栈，包括Vue 3前端框架和FastAPI后端框架，确保良好的用户体验和系统性能。

用户系统的引入使得游戏能够保存用户的进度和成绩，提供更好的游戏体验和学习效果追踪。管理后台则方便管理员管理游戏内容和查看数据统计，以便不断优化游戏内容和教学效果。 